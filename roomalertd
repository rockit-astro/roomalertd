#!/usr/bin/env python3
#
# This file is part of roomalertd.
#
# roomalertd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# roomalertd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with roomalertd.  If not, see <http://www.gnu.org/licenses/>.

"""Front end for the RoomAlert monitor for the Warwick one-metre & NITES telescopes"""

import argparse
import datetime
import socket
import demjson
import Pyro4

# Configuration settings for Pyro
# label : (host_IP, host_port, host_name, sensor_IP)
PYRO_CONFIG = {
    'nites'    : ('192.168.0.81', 9008, 'nites_roomalert_daemon', '192.168.0.44'),
    'onemetre' : ('192.168.0.102', 9008, 'onemetre_roomalert_daemon', '192.168.0.47')
    }

# Room Alert settings dictionary
# label : (sensor_class, sensor_class_id, sensor_type_str, return_type)
INSTRUMENT_SENSORS = {
    'nites' : {
        'internal_temperature' : ('sensor', 0, 'tempc', float),
        'internal_humidity' : ('sensor', 0, 'humid', float),
        'rack_temperature' : ('sensor', 2, 'tempc', float),
        'rack_humidity' : ('sensor', 2, 'humid', float),
        'security_system' : ('switch_sen', 7, 'status', bool),
        'mains_power' : ('switch_sen', 0, 'status', bool)
        },
    'onemetre' : {
        'internal_temp' : ('sensor', 1, 'tc', float),
        'internal_humidity' : ('sensor', 1, 'h', float),
        'external_temp' : ('sensor', 0, 'tc', float),
        'external_humidity' : ('sensor', 0, 'h', float),
        'roomalert_temp' : ('internal_sen', 0, 'tc', float),
        'roomalert_humidity' : ('internal_sen', 0, 'h', float),
        'truss_temp' : ('sensor', 2, 'tc', float),
        'hatch_closed' : ('s_sen', 0, 'stat', bool),
        'trap_closed' : ('s_sen', 1, 'stat', bool),
        'security_system_safe' : ('s_sen', 2, 'stat', bool)
    }
}

ROOMALERT_PORT = 80
ROOMALERT_QUERY_TIMEOUT = 5

# Set automatically when generating RPM package
SOFTWARE_VERSION = 'UNKNOWN'

# pylint: disable=broad-except
# pylint: disable=too-few-public-methods
# pylint: disable=invalid-name

def query_roomalert_json(hostname, port, timeout):
    """Query json data from the roomalert"""
    # The Room Alert omits the HTTP header when returning JSON.
    # This violates the HTTP spec and prevents us from using the
    # standard query libraries.  We instead speak HTTP ourselves over a socket.
    try:
        sock = socket.create_connection((hostname, port), timeout)
        sock.sendall('GET /getData.htm HTTP/1.0\n\n'.encode('ascii'))

        data = [sock.recv(4096)]
        while data[-1]:
            data.append(sock.recv(4096))

    except Exception as exception:
        raise Exception('Socket error while querying {}: {}'.format(hostname, str(exception)))

    # The first line will either be the JSON we want, or a raw HTTP header
    response = ''.join(b.decode('ascii') for b in data)

    if response[0] != '{':
        raise Exception('Unexpected response from {}: {}'.format(hostname, response))

    # The JSON returned by earlier firmwares omits quotes around the keys
    # This violates the JSON specification, and is not accepted by the
    # built-in JSON parser.  demjson accepts this invalid input.
    return demjson.decode(response)

class RoomAlertDaemon:
    """Wraps a web request to the RoomAlert and dealing with its malformed responses"""
    def __init__(self, instrument):
        """Set which Room Alert to query"""
        self.instrument = instrument

    def last_measurement(self):
        """Query the latest valid measurement.
        May return None if no data is available"""
        try:
            data = query_roomalert_json(PYRO_CONFIG[self.instrument][3], ROOMALERT_PORT,
                                        ROOMALERT_QUERY_TIMEOUT)
            dic = {}
            date = datetime.datetime.strptime(data['date'], "%m/%d/%y %H:%M:%S")
            dic.update({
                'date' : date.strftime('%Y-%m-%dT%H:%M:%SZ'),
                'software_version': SOFTWARE_VERSION
            })

            sub_dic = INSTRUMENT_SENSORS[self.instrument]
            for key in sub_dic.keys():
                t = sub_dic[key]
                dic.update({key : t[-1](data[t[0]][t[1]][t[2]])})
            return dic

        except Exception as exception:
            print('{} ERROR: failed to query from RoomAlert: {}' \
                  .format(datetime.datetime.utcnow(), str(exception)))
            return None

def spawn_daemon(instrument):
    """Spawns the daemon and registers it with Pyro"""
    Pyro4.config.COMMTIMEOUT = 5
    pyro = Pyro4.Daemon(host=PYRO_CONFIG[instrument][0],
                        port=PYRO_CONFIG[instrument][1])
    roomalert = RoomAlertDaemon(instrument)
    uri = pyro.register(roomalert, objectId=PYRO_CONFIG[instrument][2])

    print('Starting RoomAlert daemon with Pyro ID:', uri)
    pyro.requestLoop()
    print('Stopping RoomAlert daemon with Pyro ID:', uri)

if __name__ == '__main__':
    description = 'Room Alert Server'
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('instrument', choices=['onemetre', 'nites'], help='Select an instrument')
    args = parser.parse_args()
    spawn_daemon(args.instrument)

