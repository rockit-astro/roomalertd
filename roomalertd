#!/usr/bin/env python3.6
#
# This file is part of roomalertd.
#
# roomalertd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# roomalertd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with roomalertd.  If not, see <http://www.gnu.org/licenses/>.

"""Front end for the RoomAlert monitor for the Warwick one-metre & NITES telescopes"""

import argparse
import datetime
import json
import socket
import sys
import threading
import traceback
import urllib.request
import demjson
import Pyro4
from warwick.observatory.common import log
from warwick.observatory.roomalert import Config

# Set automatically when generating RPM package
SOFTWARE_VERSION = 'UNKNOWN'


def query_legacy_roomalert(config):
    """Query json data from older roomalert versions that violate HTTP/JSON standards"""
    # The Room Alert omits the HTTP header when returning JSON.
    # This violates the HTTP spec and prevents us from using the
    # standard query libraries.  We instead speak HTTP ourselves over a socket.
    try:
        sock = socket.create_connection((config.roomalert_ip, config.roomalert_port), config.roomalert_query_timeout)
        sock.sendall('GET /getData.htm HTTP/1.0\n\n'.encode('ascii'))

        data = [sock.recv(4096)]
        while data[-1]:
            data.append(sock.recv(4096))

    except Exception as exception:
        raise Exception('Socket error while querying {}: {}'.format(config.roomalert_ip, str(exception)))

    # The first line will either be the JSON we want, or a raw HTTP header
    # The name field may contain invalid ascii characters, so mask out the top bit
    response = ''.join(bytes([bb & 0x7F for bb in b]).decode('ascii') for b in data)

    if response[0] != '{':
        raise Exception('Unexpected response from {}: {}'.format(config.roomalert_ip, response))

    # The JSON returned by earlier firmwares omits quotes around the keys
    # This violates the JSON specification, and is not accepted by the
    # built-in JSON parser. demjson accepts this invalid input.
    return demjson.decode(response)


def query_modern_roomalert(config):
    """Query json data from newer roomalert versions that support proper HTTP/JSON standards"""
    try:
        url = 'http://' + config.roomalert_ip + ':' + str(config.roomalert_port) + '/getData.json'
        with urllib.request.urlopen(url, None, config.roomalert_query_timeout) as response:
            response = response.read().decode('ascii')
        return json.loads(response)

    except Exception as exception:
        raise Exception('Socket error while querying {}: {}'.format(config.roomalert_ip, str(exception)))


class RoomAlertDaemon:
    """Wraps a web request to the RoomAlert and dealing with its malformed responses"""
    def __init__(self, config):
        """Set which Room Alert to query"""
        self._config = config
        self._query_data = query_legacy_roomalert if config.roomalert_legacy_api else query_modern_roomalert
        self._last_query_failed = False

        self._lock = threading.Lock()
        self._last_measurement_date = None
        self._last_measurement = None

    @Pyro4.expose
    def last_measurement(self):
        """Query the latest valid measurement.
        May return None if no data is available"""
        now = datetime.datetime.utcnow()

        # Rate limit queries
        with self._lock:
            if self._last_measurement_date and (now - self._last_measurement_date).total_seconds() < self._config.query_ratelimit:
                return self._last_measurement

            try:
                data = self._query_data(self._config)

                dic = {}
                date = datetime.datetime.strptime(data['date'], "%m/%d/%y %H:%M:%S")
                now = datetime.datetime.utcnow()
                dic.update({
                    # The roomalert reported date may be grossly wrong, so default to the current time
                    'date': now.strftime('%Y-%m-%dT%H:%M:%SZ'),
                    'roomalert_date': date.strftime('%Y-%m-%dT%H:%M:%SZ'),
                    'software_version': SOFTWARE_VERSION
                })

                for sensor in self._config.sensors:
                    dic.update({sensor['id'] : self._config.resolve_sensor_measurement(sensor, data)})

                if self._last_query_failed:
                    log.info(self._config.log_name, 'Restored contact with Room Alert')
                    self._last_query_failed = False

                self._last_measurement = dic
                self._last_measurement_date = now

                return dic

            except Exception:
                print('{} ERROR: failed to query from RoomAlert:'.format(datetime.datetime.utcnow()))
                traceback.print_exc(file=sys.stdout)

            if not self._last_query_failed:
                log.error(self._config.log_name, 'Lost contact with Room Alert')

            self._last_query_failed = True
            return None

    @Pyro4.expose
    def measurement_sensors(self):
        """
        Returns a dictionary of sensor definitions
        """
        return {s['id']: s for s in self._config.sensors}

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Room Alert Server')
    parser.add_argument('config', help='Path to configuration json file')
    args = parser.parse_args()
    _config = Config(args.config)
    _config.daemon.launch(RoomAlertDaemon(_config))
