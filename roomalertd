#!/usr/bin/env python3.6
#
# This file is part of roomalertd.
#
# roomalertd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# roomalertd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with roomalertd.  If not, see <http://www.gnu.org/licenses/>.

"""Front end for the RoomAlert monitor for the Warwick one-metre & NITES telescopes"""

import argparse
import datetime
import json
import socket
import urllib.request
import demjson
import Pyro4
from warwick.observatory.common import daemons, log

# Configuration settings for daemon
# label : (PyroDaemon, sensor_ip, is_legacy_device, sensors)
# sensors: label : (sensor_class, sensor_class_id, sensor_type_str, return_type)
CONFIG = {
    'nites' : (daemons.nites_roomalert, '10.2.6.187', True, {
        'internal_temperature' : ('sensor', 0, 'tempc', float),
        'internal_humidity' : ('sensor', 0, 'humid', float),
        'rack_temperature' : ('sensor', 2, 'tempc', float),
        'rack_humidity' : ('sensor', 2, 'humid', float),
        'security_system' : ('switch_sen', 7, 'status', bool),
        'mains_power' : ('switch_sen', 0, 'status', bool)
    }),

    'swasp' : (daemons.superwasp_roomalert, '192.168.0.46', True, {
        'roomalert_temp' : ('sensor', 0, 'tempc', float),
        'roomalert_humidity' : ('sensor', 0, 'humid', float),
        'rack_temp' : ('sensor', 1, 'tempc', float),
        'rack_humidity' : ('sensor', 1, 'humid', float),
        'cam_rack_temp' : ('sensor', 2, 'tempc', float),
        'comp_room_temp' : ('sensor', 3, 'tempc', float),
        'comp_room_humidity' : ('sensor', 3, 'humid', float),
        'aircon_no_airflow' : ('switch_sen', 0, 'status', bool),
        'roof_closed' : ('switch_sen', 1, 'status', bool),
        'roof_power' : ('switch_sen', 2, 'status', bool)
    }),

    'onemetre' : (daemons.onemetre_roomalert, '10.2.6.209', False, {
        'internal_temp' : ('sensor', 1, 'tc', float),
        'internal_humidity' : ('sensor', 1, 'h', float),
        'roomalert_temp' : ('internal_sen', 0, 'tc', float),
        'roomalert_humidity' : ('internal_sen', 0, 'h', float),
        'truss_temp' : ('sensor', 2, 'tc', float),
        'hatch_closed' : ('s_sen', 0, 'stat', bool),
        'trap_closed' : ('s_sen', 1, 'stat', bool),
        'security_system_safe' : ('s_sen', 2, 'stat', bool)
    }),

    'goto' : (daemons.goto_roomalert, '10.2.6.5', False, {
        'internal_temp' : ('sensor', 1, 'tc', float),
        'internal_humidity' : ('sensor', 1, 'h', float),
        'dome2_internal_temp' : ('sensor', 0, 'tc', float),
        'dome2_internal_humidity' : ('sensor', 0, 'h', float),
        'roomalert_temp' : ('internal_sen', 0, 'tc', float),
        'roomalert_humidity' : ('internal_sen', 0, 'h', float),
    })
}

ROOMALERT_PORT = 80
ROOMALERT_QUERY_TIMEOUT = 5

# Set automatically when generating RPM package
SOFTWARE_VERSION = 'UNKNOWN'

# pylint: disable=broad-except
# pylint: disable=too-few-public-methods
# pylint: disable=invalid-name

def query_legacy_roomalert(hostname, port, timeout):
    """Query json data from older roomalert versions that violate HTTP/JSON standards"""
    # The Room Alert omits the HTTP header when returning JSON.
    # This violates the HTTP spec and prevents us from using the
    # standard query libraries.  We instead speak HTTP ourselves over a socket.
    try:
        sock = socket.create_connection((hostname, port), timeout)
        sock.sendall('GET /getData.htm HTTP/1.0\n\n'.encode('ascii'))

        data = [sock.recv(4096)]
        while data[-1]:
            data.append(sock.recv(4096))

    except Exception as exception:
        raise Exception('Socket error while querying {}: {}'.format(hostname, str(exception)))

    # The first line will either be the JSON we want, or a raw HTTP header
    response = ''.join(b.decode('ascii') for b in data)

    if response[0] != '{':
        raise Exception('Unexpected response from {}: {}'.format(hostname, response))

    # The JSON returned by earlier firmwares omits quotes around the keys
    # This violates the JSON specification, and is not accepted by the
    # built-in JSON parser.  demjson accepts this invalid input.
    return demjson.decode(response)

def query_modern_roomalert(hostname, port, timeout):
    """Query json data from newer roomalert versions that support proper HTTP/JSON standards"""
    try:
        url = 'http://' + hostname + ':' + str(port) + '/getData.json'
        with urllib.request.urlopen(url, None, timeout) as response:
            response = response.read().decode('ascii')
        return json.loads(response)

    except Exception as exception:
        raise Exception('Socket error while querying {}: {}'.format(hostname, str(exception)))

class RoomAlertDaemon:
    """Wraps a web request to the RoomAlert and dealing with its malformed responses"""
    def __init__(self, name, config):
        """Set which Room Alert to query"""
        self._name = name
        self._ip = config[1]
        self._query_data = query_legacy_roomalert if config[2] else query_modern_roomalert
        self._query_failed = False
        self._sensors = config[3]

    @Pyro4.expose
    def last_measurement(self):
        """Query the latest valid measurement.
        May return None if no data is available"""
        try:
            data = self._query_data(self._ip, ROOMALERT_PORT, ROOMALERT_QUERY_TIMEOUT)

            dic = {}
            date = datetime.datetime.strptime(data['date'], "%m/%d/%y %H:%M:%S")
            dic.update({
                # The roomalert reported date may be grossly wrong, so default to the current time
                'date': datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ'),
                'roomalert_date': date.strftime('%Y-%m-%dT%H:%M:%SZ'),
                'software_version': SOFTWARE_VERSION
            })

            for key in self._sensors:
                t = self._sensors[key]
                dic.update({key : t[-1](data[t[0]][t[1]][t[2]])})

            if self._query_failed:
                log.info(self._name, 'Restored contact with Room Alert')
                self._query_failed = False

            return dic

        except Exception as exception:
            print('{} ERROR: failed to query from RoomAlert: {}' \
                  .format(datetime.datetime.utcnow(), str(exception)))

            if not self._query_failed:
                log.error(self._name, 'Lost contact with Room Alert')

            self._query_failed = True
            return None

if __name__ == '__main__':
    description = 'Room Alert Server'
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument('instrument', choices=CONFIG.keys(), help='Select an instrument')
    args = parser.parse_args()
    roomalert = CONFIG[args.instrument]
    roomalert[0].launch(RoomAlertDaemon(args.instrument + '_roomalertd', roomalert))
