#!/usr/bin/env python3
#
# This file is part of roomalertd.
#
# roomalertd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# roomalertd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with roomalertd.  If not, see <http://www.gnu.org/licenses/>.

"""Commandline client for querying the latest measurement from roomalertd"""

import datetime
import glob
import json
import os
import sys
import Pyro4
from warwick.observatory.common import TFmt
from warwick.observatory.roomalert import Config

SCRIPT_NAME = os.path.basename(sys.argv[0])
sys.excepthook = Pyro4.util.excepthook


def run_command(config_paths, roomalert_id, command, args):
    """Runs a command and returns the code"""
    config = Config(config_paths[roomalert_id])
    try:
        ret = command(config, sorted(config_paths.keys()), args)
    except Pyro4.errors.CommunicationError:
        ret = 1

    return ret


def print_status(config, *_):
    """Prints the latest environment data in human-readable form"""
    try:
        with config.daemon.connect() as roomalert:
            latest = roomalert.last_measurement()
            sensors = roomalert.measurement_sensors()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with Room Alert daemon')
        return 1

    if latest is not None and sensors is not None:
        date = datetime.datetime.strptime(latest['date'], '%Y-%m-%dT%H:%M:%SZ')
        print('Data received ' + TFmt.Bold + str(date) + TFmt.Clear)

        # Find the longest label to set the parameter indent
        max_label_length = 0
        for s in sensors.values():
            max_label_length = max(max_label_length, len(s['label']))

        for key, s in sensors.items():
            label_padding = max_label_length - len(s['label'])
            line = ' ' * label_padding + s['label'] + ': ' + TFmt.Bold

            if 'values' in s:
                line += s['values'][int(latest[key])]
            else:
                line += str(latest[key]) + ' ' + s['units']

            if not latest.get(key + '_valid', True):
                line += TFmt.Red + ' (INVALID)'

            line += TFmt.Clear
            print(line)
        print()
    else:
        print('error: failed to query data')

    return 0


def format_value(data, valid, suffix=''):
    """Builds a formatted string with a value"""
    ret = TFmt.Bold + str(data) + suffix
    if not valid:
        ret += TFmt.Red + ' (INVALID)'
    ret += TFmt.Clear
    return ret


def print_json(config, *_):
    """Prints the latest environment data in machine-readable form"""
    try:
        with config.daemon.connect() as roomalert:
            latest = roomalert.last_measurement()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with Room Alert daemon')
        return 1

    print(json.dumps(latest))

    return 0


def enable_relay(config, *_):
    try:
        with config.daemon.connect() as roomalert:
            roomalert.set_relay(True)
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with Room Alert daemon')
        return 1

    return 0


def disable_relay(config, *_):
    try:
        with config.daemon.connect() as roomalert:
            roomalert.set_relay(False)
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with Room Alert daemon')
        return 1

    return 0


def print_usage(config_paths):
    """Prints the utility help"""
    print('Usage: {} [{}] <command>'.format(SCRIPT_NAME, '|'.join(sorted(config_paths.keys()))))
    print()
    print('   status      print a human-readable summary of the Room Alert status')
    print('   json        print a machine-readable summary of the Room Alert status')
    print()

    return 1


if __name__ == '__main__':
    if 'ROOMALERTD_CONFIG_ROOT' in os.environ:
        config_root = os.environ['ROOMALERTD_CONFIG_ROOT']
    else:
        config_root = '/etc/roomalertd'

    configs = {os.path.basename(p)[:-5]: p for p in glob.glob(os.path.join(config_root, '*.json'))}
    if not configs:
        print('error: no roomalert configs were found in ' + config_root)
        print('       run as ROOMALERTD_CONFIG_ROOT=/path/to/config/root ' + ' '.join(sys.argv))
        print('       to specify the configuration root directory')
        sys.exit(1)

    if len(sys.argv) == 2 and sys.argv[1] == 'list-roomalerts':
        print(' '.join(sorted(configs.keys())))
        sys.exit(0)

    if len(sys.argv) < 3:
        sys.exit(print_usage(configs))

    commands = {
        'status': print_status,
        'json': print_json,
        'enable': enable_relay,
        'disable': disable_relay,
    }

    if sys.argv[1] not in configs or sys.argv[2] not in commands:
        sys.exit(print_usage(configs))

    sys.exit(run_command(configs, sys.argv[1], commands[sys.argv[2]], sys.argv[3:]))
