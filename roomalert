#!/usr/bin/env python3.6
#
# This file is part of roomalertd.
#
# roomalertd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# roomalertd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with roomalertd.  If not, see <http://www.gnu.org/licenses/>.

"""Commandline client for querying the latest measurement from roomalertd"""

import datetime
import json
import os
import sys
import Pyro4
from warwick.observatory.common import daemons

SCRIPT_NAME = os.path.basename(sys.argv[0])
sys.excepthook = Pyro4.util.excepthook

DAEMONS = {
    'onemetre': daemons.onemetre_roomalert,
    'goto': daemons.goto_roomalert,
    'nites': daemons.nites_roomalert,
    'swasp': daemons.superwasp_roomalert
}


def run_command(daemon, command):
    """Prints the message associated with a status code and returns the code"""
    try:
        ret = command(daemon)
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with the Room Alert daemon')
        ret = 1

    return ret


def print_status(daemon):
    """Prints the latest environment data in human-readable form"""
    latest = None
    try:
        with daemon.connect() as roomalert:
            latest = roomalert.last_measurement()
            sensors = roomalert.measurement_sensors()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with Room Alert daemon')
        return 1

    if latest is not None and sensors is not None:
        date = datetime.datetime.strptime(latest['date'], '%Y-%m-%dT%H:%M:%SZ')
        print('Data received \033[1m{}\033[0m:'.format(date))

        # Find the longest label to set the parameter indent
        max_label_length = 0
        for s in sensors.values():
            max_label_length = max(max_label_length, len(s['label']))

        for key, s in sensors.items():
            label_padding = max_label_length - len(s['label'])
            line = ' ' * label_padding + s['label'] + ': \033[1m'

            if 'values' in s:
                line += s['values'][int(latest[key])]
            else:
                line += '{}'.format(latest[key]) + ' ' + s['units']

            if not latest.get(key + '_valid', True):
                line += '\033[91m (INVALID)'

            line += '\033[0m'
            print(line)
        print()
    else:
        print('error: failed to query data')

    return 0

def format_value(data, valid, suffix=''):
    """Builds a formatted string with a value"""
    ret = FMT_BOLD + str(data) + suffix
    if not valid:
        ret += FMT_RED + ' (INVALID)'
    ret += FMT_CLEAR
    return ret

def print_json(daemon):
    """Prints the latest environment data in machine-readable form"""
    latest = None
    try:
        with daemon.connect() as roomalert:
            latest = roomalert.last_measurement()
    except Pyro4.errors.CommunicationError:
        print('error: unable to communicate with Room Alert daemon')
        return 1

    print(json.dumps(latest))

    return 0


def print_usage():
    """Prints the utility help"""
    print('Usage: {} [onemetre|goto|nites|swasp] <command>'.format(SCRIPT_NAME))
    print()
    print('   status      print a human-readable summary of the Room Alert status')
    print('   json        print a machine-readable summary of the Room Alert status')
    print()

    return 1


if __name__ == '__main__':
    if len(sys.argv) < 3:
        sys.exit(print_usage())

    commands = {
        'status': print_status,
        'json': print_json,
    }

    if sys.argv[1] not in DAEMONS or sys.argv[2] not in commands:
        sys.exit(print_usage())

    sys.exit(run_command(DAEMONS[sys.argv[1]], commands[sys.argv[2]]))
